{"version":3,"sources":["components/DiceCounter.js","components/RollButton.js","components/Dice.js","components/Results.js","components/App.js","index.js"],"names":["DiceCounter","props","react_default","a","createElement","className","type","value","onClick","this","decrement","counter","increment","Component","RollButton","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","wasclicked","diceArray","rollTotal","getRandomInt","min","max","Math","ceil","floor","dieRoll","random","i","minSides","maxSides","changeRoll","bind","assertThisInitialized","React","Dice","state","setState","components_DiceCounter","name","components_RollButton","dMin","dMax","Results","results","slice","reverse","map","roll","index","key","App","rollResult","clearRoll","num","concat","components_Dice","components_Results","ReactDom","render","components_App","document","querySelector"],"mappings":"2MAiBeA,iLAdJC,GACC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAEXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASC,MAAM,IAAIF,UAAY,uBAAuBG,QAASC,KAAKR,MAAMS,YAEtFR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAuBI,KAAKR,MAAMU,SAEhDT,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASC,MAAM,IAAIF,UAAU,uDAAuDG,QAASC,KAAKR,MAAMW,oBAT9GC,aCoCXC,cAlCX,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAAK,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAX,KAAMR,KAKVoB,WAAa,WAET,IAAIC,EAAY,GACZC,EAAY,EAGhB,SAASC,EAAcC,EAAKC,GACxBD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACjB,IAAII,EAAUH,KAAKE,MAAMF,KAAKI,UAAYL,EAAMD,EAAM,IAAMA,EAC5DH,GAAaQ,EAAU,IACvBP,GAAwBO,EAI5B,IAAK,IAAIE,EAAI,EAAGA,EAAIjB,EAAKd,MAAMU,QAASqB,IACpCR,EAAaT,EAAKd,MAAMgC,SAAUlB,EAAKd,MAAMiC,UAIjDnB,EAAKd,MAAMkC,WAAWpB,EAAKd,MAAMU,QAAU,IAAMI,EAAKd,MAAMiC,SAAW,KAAOZ,EAAY,MAAQC,IAxBlGR,EAAKM,WAAaN,EAAKM,WAAWe,KAAhBpB,OAAAqB,EAAA,EAAArB,QAAAqB,EAAA,EAAArB,CAAAD,KAFHA,wEA8Bf,OAAOb,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASD,UAAU,YAAYG,QAASC,KAAKY,WAAYd,MAAM,gBA/BjE+B,IAAMzB,WCsDhB0B,cApDX,SAAAA,EAAYtC,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAA8B,IACfxB,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAuB,GAAAnB,KAAAX,KAAMR,KACDuC,MAAQ,CAAE7B,QAAS,GACxBI,EAAKH,UAAYG,EAAKH,UAAUwB,KAAfpB,OAAAqB,EAAA,EAAArB,QAAAqB,EAAA,EAAArB,CAAAD,KACjBA,EAAKL,UAAYK,EAAKL,UAAU0B,KAAfpB,OAAAqB,EAAA,EAAArB,QAAAqB,EAAA,EAAArB,CAAAD,KAJFA,2EASfN,KAAKgC,SAAS,CACV9B,QAASF,KAAK+B,MAAM7B,QAAU,IAE9BF,KAAK+B,MAAM7B,SAAW,IACtBF,KAAKgC,SAAS,CACV9B,QAAS,yCAOjBF,KAAKgC,SAAS,CACV9B,QAASF,KAAK+B,MAAM7B,QAAU,IAE9BF,KAAK+B,MAAM7B,SAAW,GACtBF,KAAKgC,SAAS,CACV9B,QAAS,qCAMjB,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEXH,EAAAC,EAAAC,cAACsC,EAAD,CACI/B,QAASF,KAAK+B,MAAM7B,QACpBC,UAAWH,KAAKG,UAChBF,UAAWD,KAAKC,YACpBR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaI,KAAKR,MAAM0C,MAEtCzC,EAAAC,EAAAC,cAACwC,EAAD,CACAX,SAAUxB,KAAKR,MAAM4C,KACrBX,SAAUzB,KAAKR,MAAM6C,KACrBnC,QAASF,KAAK+B,MAAM7B,QACpBwB,WAAY1B,KAAKR,MAAMkC,qBA9CpBtB,aCWJkC,mLAXP,OACI7C,EAAAC,EAAAC,cAAA,WAESK,KAAKR,MAAM+C,QAAQC,MAAM,GAAGC,UAAUC,IAAI,SAACC,EAAMC,GAAP,OACvCnD,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBiD,IAAKD,GAAQD,aAN5CvC,aC4DP0C,cAzDX,SAAAA,EAAYtD,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAA8C,IACfxC,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAuC,GAAAnC,KAAAX,KAAMR,KACDuC,MAAQ,CAAEgB,WAAY,IAC3BzC,EAAKoB,WAAapB,EAAKoB,WAAWC,KAAhBpB,OAAAqB,EAAA,EAAArB,QAAAqB,EAAA,EAAArB,CAAAD,KAClBA,EAAK0C,UAAY1C,EAAK0C,UAAUrB,KAAfpB,OAAAqB,EAAA,EAAArB,QAAAqB,EAAA,EAAArB,CAAAD,KAJFA,0EAQR2C,GACPjD,KAAKgC,SAAS,CACVe,WAAY/C,KAAK+B,MAAMgB,WAAWG,OAAOD,EAAM,2CAMnDjD,KAAKgC,SAAS,CACVe,WAAY,sCAKhB,OACItD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAjB,oBAEJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,aAEAH,EAAAC,EAAAC,cAACwD,EAAD,CAAMjB,KAAK,KAAKE,KAAM,EAAGC,KAAM,EAAGX,WAAY1B,KAAK0B,aACnDjC,EAAAC,EAAAC,cAACwD,EAAD,CAAMjB,KAAK,KAAKE,KAAM,EAAGC,KAAM,EAAGX,WAAY1B,KAAK0B,aACnDjC,EAAAC,EAAAC,cAACwD,EAAD,CAAMjB,KAAK,KAAKE,KAAM,EAAGC,KAAM,EAAGX,WAAY1B,KAAK0B,aACnDjC,EAAAC,EAAAC,cAACwD,EAAD,CAAMjB,KAAK,MAAME,KAAM,EAAGC,KAAM,GAAIX,WAAY1B,KAAK0B,aACrDjC,EAAAC,EAAAC,cAACwD,EAAD,CAAMjB,KAAK,MAAME,KAAM,EAAGC,KAAM,GAAIX,WAAY1B,KAAK0B,aACrDjC,EAAAC,EAAAC,cAACwD,EAAD,CAAMjB,KAAK,MAAME,KAAM,EAAGC,KAAM,GAAIX,WAAY1B,KAAK0B,aACrDjC,EAAAC,EAAAC,cAACwD,EAAD,CAAMjB,KAAK,OAAOE,KAAM,EAAGC,KAAM,IAAKX,WAAY1B,KAAK0B,cAE3DjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,UACAH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASD,UAAU,gBAAgBG,QAASC,KAAKgD,UAAWlD,MAAM,WAElFL,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAACyD,EAAD,CAASb,QAASvC,KAAK+B,MAAMgB,yBAhD3C3C,aCElBiD,IAASC,OAED7D,EAAAC,EAAAC,cAAC4D,EAAD,MAEJC,SAASC,cAAc","file":"static/js/main.eb3df0a3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass DiceCounter extends Component {\r\n    render(props) {\r\n            return (\r\n                <div className=\"die__counter\">\r\n                    {/* Button to decrease the quantity of dice to be rolled */}\r\n                    <input type=\"button\" value=\"-\" className = \"die__counter__button\" onClick={this.props.decrement}></input>\r\n                    {/* The current quantity of dice to be rolled. This value is used in the random number generator calculation */}\r\n                    <h3 className=\"die__counter__value\">{this.props.counter}</h3>\r\n                    {/* Button to increase the quantity of dice to be rolled */}\r\n                    <input type=\"button\" value=\"+\" className=\"die__counter__button die__counter__button--increment\" onClick={this.props.increment}></input>\r\n                </div>\r\n            );\r\n        }\r\n}\r\n\r\nexport default DiceCounter;","import React from 'react';\r\n\r\n\r\nclass RollButton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.wasclicked = this.wasclicked.bind(this);\r\n        \r\n    }\r\n\r\n    wasclicked = () => {\r\n        //String of results from the random number generator. The result is also totaled if more than 1 die was rolled \r\n        let diceArray = '';\r\n        let rollTotal = 0;\r\n\r\n        //Calculates a random number based on the maximum number of sides of the dice. The result is added to a string\r\n        function getRandomInt (min, max) {\r\n            min = Math.ceil(min);\r\n            max = Math.floor(max);\r\n            let dieRoll = Math.floor(Math.random() * (max - min + 1)) + min;\r\n            diceArray += dieRoll + ' ';\r\n            rollTotal = rollTotal + dieRoll;\r\n        }\r\n\r\n        //The number generator is run a set number of times based on the quantity of die selected from the Dice Counter component\r\n        for (let i = 0; i < this.props.counter; i++) {\r\n            getRandomInt(this.props.minSides, this.props.maxSides);\r\n        }\r\n        \r\n        //The results of each roll are added to the array state of the app to be displayed in a meaningful way to the RPG player\r\n        this.props.changeRoll(this.props.counter + 'd' + this.props.maxSides + ': ' + diceArray + ' = ' + rollTotal);\r\n    }\r\n    \r\n    render() {\r\n        return <input type=\"button\" className=\"die__roll\" onClick={this.wasclicked} value=\"Roll\"></input>;\r\n    }\r\n}\r\n\r\nexport default RollButton;\r\n","import React, { Component } from 'react';\r\nimport DiceCounter from './DiceCounter';\r\nimport RollButton from './RollButton';\r\n\r\nclass Dice extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { counter: 1 };\r\n        this.increment = this.increment.bind(this);\r\n        this.decrement = this.decrement.bind(this);\r\n    }\r\n\r\n    //Increase the quantity of dice being rolled\r\n    increment() {\r\n        this.setState({\r\n            counter: this.state.counter + 1\r\n        });\r\n        if (this.state.counter >= 10) {\r\n            this.setState({\r\n                counter: 10\r\n            });\r\n        }\r\n    }\r\n\r\n    //Decrease the quantity of dice being rolled\r\n    decrement() {\r\n        this.setState({\r\n            counter: this.state.counter - 1\r\n        });\r\n        if (this.state.counter <= 0) {\r\n            this.setState({\r\n                counter: 0\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"die\">\r\n                {/* Component to increase or decrease the quantity of dice being rolled */}\r\n                <DiceCounter\r\n                    counter={this.state.counter}\r\n                    increment={this.increment}\r\n                    decrement={this.decrement} />\r\n                <h3 className=\"die__name\">{this.props.name}</h3>\r\n                {/* Button Component to perform the random number calculation for each individual dice */}\r\n                <RollButton\r\n                minSides={this.props.dMin}\r\n                maxSides={this.props.dMax}\r\n                counter={this.state.counter}\r\n                changeRoll={this.props.changeRoll}/>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dice;","import React, { Component } from 'react';\r\n\r\nclass Results extends Component {\r\n    render(){\r\n        return (\r\n            <div>\r\n                    {/* The roll result state is displayed to the user with the latest roll at the top of the list */}\r\n                    {this.props.results.slice(0).reverse().map((roll, index) => (\r\n                        <p className=\"result__value\" key={index}>{roll}</p>\r\n                    ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Results;","import React, { Component } from 'react';\r\nimport Dice from './Dice';\r\nimport Results from './Results';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { rollResult: [] };\r\n        this.changeRoll = this.changeRoll.bind(this);\r\n        this.clearRoll = this.clearRoll.bind(this);\r\n    }\r\n\r\n    //Adds the result of the number generator to the state when Roll is clicked\r\n    changeRoll(num) {\r\n        this.setState({\r\n            rollResult: this.state.rollResult.concat(num + ' ')\r\n        });\r\n    }\r\n\r\n    //Clears the state and displayed results\r\n    clearRoll() {\r\n        this.setState({\r\n            rollResult: []\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"app\">\r\n                    <div className=\"header\">\r\n                        <h1><i className=\"fas fa-dice-d20\"></i>RPG Dice Roller</h1>\r\n                    </div>\r\n                    <div className=\"rollers\">\r\n                        <div>\r\n                            <h1 className=\"rollers__many\">How many?</h1>\r\n                            {/* Each die component contains the minimum and maximum number of sides, which are used in the random number generator*/}\r\n                            <Dice name=\"d4\" dMin={1} dMax={4} changeRoll={this.changeRoll} />\r\n                            <Dice name=\"d6\" dMin={1} dMax={6} changeRoll={this.changeRoll} />\r\n                            <Dice name=\"d8\" dMin={1} dMax={8} changeRoll={this.changeRoll} />\r\n                            <Dice name=\"d10\" dMin={1} dMax={10} changeRoll={this.changeRoll} />\r\n                            <Dice name=\"d12\" dMin={1} dMax={12} changeRoll={this.changeRoll} />\r\n                            <Dice name=\"d20\" dMin={1} dMax={20} changeRoll={this.changeRoll} />\r\n                            <Dice name=\"d100\" dMin={1} dMax={100} changeRoll={this.changeRoll} />\r\n                        </div>\r\n                        <div className=\"result\">\r\n                            <div className=\"result__top\">\r\n                                <h1 className=\"result__header\">Result</h1>\r\n                                <input type=\"button\" className=\"result__clear\" onClick={this.clearRoll} value=\"Clear\"></input>\r\n                            </div>\r\n                            <div>\r\n                                {/* The results from the random number generator are compiled and displayed here to the user */}\r\n                                <Results results={this.state.rollResult} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport \"./main.scss\";\r\n\r\nimport App from './components/App';\r\n\r\nReactDom.render(\r\n    \r\n        <App />,\r\n    \r\n    document.querySelector('#root')\r\n);"],"sourceRoot":""}